/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.opengis.citygml.appearance.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.opengis.citygml.appearance.util.AppearanceAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AppearanceItemProviderAdapterFactory extends AppearanceAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AppearanceItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.appearance.AbstractSurfaceDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractSurfaceDataTypeItemProvider abstractSurfaceDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.appearance.AbstractSurfaceDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractSurfaceDataTypeAdapter() {
		if (abstractSurfaceDataTypeItemProvider == null) {
			abstractSurfaceDataTypeItemProvider = new AbstractSurfaceDataTypeItemProvider(this);
		}

		return abstractSurfaceDataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.appearance.AbstractTextureType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractTextureTypeItemProvider abstractTextureTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.appearance.AbstractTextureType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractTextureTypeAdapter() {
		if (abstractTextureTypeItemProvider == null) {
			abstractTextureTypeItemProvider = new AbstractTextureTypeItemProvider(this);
		}

		return abstractTextureTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.appearance.AppearancePropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppearancePropertyTypeItemProvider appearancePropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.appearance.AppearancePropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppearancePropertyTypeAdapter() {
		if (appearancePropertyTypeItemProvider == null) {
			appearancePropertyTypeItemProvider = new AppearancePropertyTypeItemProvider(this);
		}

		return appearancePropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.appearance.AppearanceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppearanceTypeItemProvider appearanceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.appearance.AppearanceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppearanceTypeAdapter() {
		if (appearanceTypeItemProvider == null) {
			appearanceTypeItemProvider = new AppearanceTypeItemProvider(this);
		}

		return appearanceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.appearance.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.appearance.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.appearance.GeoreferencedTextureType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeoreferencedTextureTypeItemProvider georeferencedTextureTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.appearance.GeoreferencedTextureType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeoreferencedTextureTypeAdapter() {
		if (georeferencedTextureTypeItemProvider == null) {
			georeferencedTextureTypeItemProvider = new GeoreferencedTextureTypeItemProvider(this);
		}

		return georeferencedTextureTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.appearance.ParameterizedTextureType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterizedTextureTypeItemProvider parameterizedTextureTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.appearance.ParameterizedTextureType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterizedTextureTypeAdapter() {
		if (parameterizedTextureTypeItemProvider == null) {
			parameterizedTextureTypeItemProvider = new ParameterizedTextureTypeItemProvider(this);
		}

		return parameterizedTextureTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.appearance.SurfaceDataPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SurfaceDataPropertyTypeItemProvider surfaceDataPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.appearance.SurfaceDataPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSurfaceDataPropertyTypeAdapter() {
		if (surfaceDataPropertyTypeItemProvider == null) {
			surfaceDataPropertyTypeItemProvider = new SurfaceDataPropertyTypeItemProvider(this);
		}

		return surfaceDataPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.appearance.TexCoordGenType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TexCoordGenTypeItemProvider texCoordGenTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.appearance.TexCoordGenType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTexCoordGenTypeAdapter() {
		if (texCoordGenTypeItemProvider == null) {
			texCoordGenTypeItemProvider = new TexCoordGenTypeItemProvider(this);
		}

		return texCoordGenTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.appearance.TexCoordListType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TexCoordListTypeItemProvider texCoordListTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.appearance.TexCoordListType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTexCoordListTypeAdapter() {
		if (texCoordListTypeItemProvider == null) {
			texCoordListTypeItemProvider = new TexCoordListTypeItemProvider(this);
		}

		return texCoordListTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.appearance.TextureAssociationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextureAssociationTypeItemProvider textureAssociationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.appearance.TextureAssociationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextureAssociationTypeAdapter() {
		if (textureAssociationTypeItemProvider == null) {
			textureAssociationTypeItemProvider = new TextureAssociationTypeItemProvider(this);
		}

		return textureAssociationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.appearance.TextureCoordinatesType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextureCoordinatesTypeItemProvider textureCoordinatesTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.appearance.TextureCoordinatesType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextureCoordinatesTypeAdapter() {
		if (textureCoordinatesTypeItemProvider == null) {
			textureCoordinatesTypeItemProvider = new TextureCoordinatesTypeItemProvider(this);
		}

		return textureCoordinatesTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.appearance.WorldToTextureType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorldToTextureTypeItemProvider worldToTextureTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.appearance.WorldToTextureType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorldToTextureTypeAdapter() {
		if (worldToTextureTypeItemProvider == null) {
			worldToTextureTypeItemProvider = new WorldToTextureTypeItemProvider(this);
		}

		return worldToTextureTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.appearance.X3DMaterialType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected X3DMaterialTypeItemProvider x3DMaterialTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.appearance.X3DMaterialType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createX3DMaterialTypeAdapter() {
		if (x3DMaterialTypeItemProvider == null) {
			x3DMaterialTypeItemProvider = new X3DMaterialTypeItemProvider(this);
		}

		return x3DMaterialTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (abstractSurfaceDataTypeItemProvider != null) abstractSurfaceDataTypeItemProvider.dispose();
		if (abstractTextureTypeItemProvider != null) abstractTextureTypeItemProvider.dispose();
		if (appearancePropertyTypeItemProvider != null) appearancePropertyTypeItemProvider.dispose();
		if (appearanceTypeItemProvider != null) appearanceTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (georeferencedTextureTypeItemProvider != null) georeferencedTextureTypeItemProvider.dispose();
		if (parameterizedTextureTypeItemProvider != null) parameterizedTextureTypeItemProvider.dispose();
		if (surfaceDataPropertyTypeItemProvider != null) surfaceDataPropertyTypeItemProvider.dispose();
		if (texCoordGenTypeItemProvider != null) texCoordGenTypeItemProvider.dispose();
		if (texCoordListTypeItemProvider != null) texCoordListTypeItemProvider.dispose();
		if (textureAssociationTypeItemProvider != null) textureAssociationTypeItemProvider.dispose();
		if (textureCoordinatesTypeItemProvider != null) textureCoordinatesTypeItemProvider.dispose();
		if (worldToTextureTypeItemProvider != null) worldToTextureTypeItemProvider.dispose();
		if (x3DMaterialTypeItemProvider != null) x3DMaterialTypeItemProvider.dispose();
	}

}
