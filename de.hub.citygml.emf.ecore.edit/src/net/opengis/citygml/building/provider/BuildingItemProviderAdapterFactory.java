/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.opengis.citygml.building.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.opengis.citygml.building.util.BuildingAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BuildingItemProviderAdapterFactory extends BuildingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BuildingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.BoundarySurfacePropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoundarySurfacePropertyTypeItemProvider boundarySurfacePropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.BoundarySurfacePropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoundarySurfacePropertyTypeAdapter() {
		if (boundarySurfacePropertyTypeItemProvider == null) {
			boundarySurfacePropertyTypeItemProvider = new BoundarySurfacePropertyTypeItemProvider(this);
		}

		return boundarySurfacePropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.BuildingFurnitureType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BuildingFurnitureTypeItemProvider buildingFurnitureTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.BuildingFurnitureType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBuildingFurnitureTypeAdapter() {
		if (buildingFurnitureTypeItemProvider == null) {
			buildingFurnitureTypeItemProvider = new BuildingFurnitureTypeItemProvider(this);
		}

		return buildingFurnitureTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.BuildingInstallationPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BuildingInstallationPropertyTypeItemProvider buildingInstallationPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.BuildingInstallationPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBuildingInstallationPropertyTypeAdapter() {
		if (buildingInstallationPropertyTypeItemProvider == null) {
			buildingInstallationPropertyTypeItemProvider = new BuildingInstallationPropertyTypeItemProvider(this);
		}

		return buildingInstallationPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.BuildingInstallationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BuildingInstallationTypeItemProvider buildingInstallationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.BuildingInstallationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBuildingInstallationTypeAdapter() {
		if (buildingInstallationTypeItemProvider == null) {
			buildingInstallationTypeItemProvider = new BuildingInstallationTypeItemProvider(this);
		}

		return buildingInstallationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.BuildingPartPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BuildingPartPropertyTypeItemProvider buildingPartPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.BuildingPartPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBuildingPartPropertyTypeAdapter() {
		if (buildingPartPropertyTypeItemProvider == null) {
			buildingPartPropertyTypeItemProvider = new BuildingPartPropertyTypeItemProvider(this);
		}

		return buildingPartPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.BuildingPartType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BuildingPartTypeItemProvider buildingPartTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.BuildingPartType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBuildingPartTypeAdapter() {
		if (buildingPartTypeItemProvider == null) {
			buildingPartTypeItemProvider = new BuildingPartTypeItemProvider(this);
		}

		return buildingPartTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.BuildingType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BuildingTypeItemProvider buildingTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.BuildingType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBuildingTypeAdapter() {
		if (buildingTypeItemProvider == null) {
			buildingTypeItemProvider = new BuildingTypeItemProvider(this);
		}

		return buildingTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.CeilingSurfaceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CeilingSurfaceTypeItemProvider ceilingSurfaceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.CeilingSurfaceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCeilingSurfaceTypeAdapter() {
		if (ceilingSurfaceTypeItemProvider == null) {
			ceilingSurfaceTypeItemProvider = new CeilingSurfaceTypeItemProvider(this);
		}

		return ceilingSurfaceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.ClosureSurfaceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClosureSurfaceTypeItemProvider closureSurfaceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.ClosureSurfaceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClosureSurfaceTypeAdapter() {
		if (closureSurfaceTypeItemProvider == null) {
			closureSurfaceTypeItemProvider = new ClosureSurfaceTypeItemProvider(this);
		}

		return closureSurfaceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.DoorType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoorTypeItemProvider doorTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.DoorType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoorTypeAdapter() {
		if (doorTypeItemProvider == null) {
			doorTypeItemProvider = new DoorTypeItemProvider(this);
		}

		return doorTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.FloorSurfaceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FloorSurfaceTypeItemProvider floorSurfaceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.FloorSurfaceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFloorSurfaceTypeAdapter() {
		if (floorSurfaceTypeItemProvider == null) {
			floorSurfaceTypeItemProvider = new FloorSurfaceTypeItemProvider(this);
		}

		return floorSurfaceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.GroundSurfaceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroundSurfaceTypeItemProvider groundSurfaceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.GroundSurfaceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroundSurfaceTypeAdapter() {
		if (groundSurfaceTypeItemProvider == null) {
			groundSurfaceTypeItemProvider = new GroundSurfaceTypeItemProvider(this);
		}

		return groundSurfaceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.IntBuildingInstallationPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntBuildingInstallationPropertyTypeItemProvider intBuildingInstallationPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.IntBuildingInstallationPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntBuildingInstallationPropertyTypeAdapter() {
		if (intBuildingInstallationPropertyTypeItemProvider == null) {
			intBuildingInstallationPropertyTypeItemProvider = new IntBuildingInstallationPropertyTypeItemProvider(this);
		}

		return intBuildingInstallationPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.IntBuildingInstallationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntBuildingInstallationTypeItemProvider intBuildingInstallationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.IntBuildingInstallationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntBuildingInstallationTypeAdapter() {
		if (intBuildingInstallationTypeItemProvider == null) {
			intBuildingInstallationTypeItemProvider = new IntBuildingInstallationTypeItemProvider(this);
		}

		return intBuildingInstallationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.InteriorFurniturePropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InteriorFurniturePropertyTypeItemProvider interiorFurniturePropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.InteriorFurniturePropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInteriorFurniturePropertyTypeAdapter() {
		if (interiorFurniturePropertyTypeItemProvider == null) {
			interiorFurniturePropertyTypeItemProvider = new InteriorFurniturePropertyTypeItemProvider(this);
		}

		return interiorFurniturePropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.InteriorRoomPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InteriorRoomPropertyTypeItemProvider interiorRoomPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.InteriorRoomPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInteriorRoomPropertyTypeAdapter() {
		if (interiorRoomPropertyTypeItemProvider == null) {
			interiorRoomPropertyTypeItemProvider = new InteriorRoomPropertyTypeItemProvider(this);
		}

		return interiorRoomPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.InteriorWallSurfaceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InteriorWallSurfaceTypeItemProvider interiorWallSurfaceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.InteriorWallSurfaceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInteriorWallSurfaceTypeAdapter() {
		if (interiorWallSurfaceTypeItemProvider == null) {
			interiorWallSurfaceTypeItemProvider = new InteriorWallSurfaceTypeItemProvider(this);
		}

		return interiorWallSurfaceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.OpeningPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpeningPropertyTypeItemProvider openingPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.OpeningPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpeningPropertyTypeAdapter() {
		if (openingPropertyTypeItemProvider == null) {
			openingPropertyTypeItemProvider = new OpeningPropertyTypeItemProvider(this);
		}

		return openingPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.RoofSurfaceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoofSurfaceTypeItemProvider roofSurfaceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.RoofSurfaceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoofSurfaceTypeAdapter() {
		if (roofSurfaceTypeItemProvider == null) {
			roofSurfaceTypeItemProvider = new RoofSurfaceTypeItemProvider(this);
		}

		return roofSurfaceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.RoomType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoomTypeItemProvider roomTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.RoomType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoomTypeAdapter() {
		if (roomTypeItemProvider == null) {
			roomTypeItemProvider = new RoomTypeItemProvider(this);
		}

		return roomTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.WallSurfaceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WallSurfaceTypeItemProvider wallSurfaceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.WallSurfaceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWallSurfaceTypeAdapter() {
		if (wallSurfaceTypeItemProvider == null) {
			wallSurfaceTypeItemProvider = new WallSurfaceTypeItemProvider(this);
		}

		return wallSurfaceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.opengis.citygml.building.WindowType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WindowTypeItemProvider windowTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.opengis.citygml.building.WindowType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWindowTypeAdapter() {
		if (windowTypeItemProvider == null) {
			windowTypeItemProvider = new WindowTypeItemProvider(this);
		}

		return windowTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (boundarySurfacePropertyTypeItemProvider != null) boundarySurfacePropertyTypeItemProvider.dispose();
		if (buildingFurnitureTypeItemProvider != null) buildingFurnitureTypeItemProvider.dispose();
		if (buildingInstallationPropertyTypeItemProvider != null) buildingInstallationPropertyTypeItemProvider.dispose();
		if (buildingInstallationTypeItemProvider != null) buildingInstallationTypeItemProvider.dispose();
		if (buildingPartPropertyTypeItemProvider != null) buildingPartPropertyTypeItemProvider.dispose();
		if (buildingPartTypeItemProvider != null) buildingPartTypeItemProvider.dispose();
		if (buildingTypeItemProvider != null) buildingTypeItemProvider.dispose();
		if (ceilingSurfaceTypeItemProvider != null) ceilingSurfaceTypeItemProvider.dispose();
		if (closureSurfaceTypeItemProvider != null) closureSurfaceTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (doorTypeItemProvider != null) doorTypeItemProvider.dispose();
		if (floorSurfaceTypeItemProvider != null) floorSurfaceTypeItemProvider.dispose();
		if (groundSurfaceTypeItemProvider != null) groundSurfaceTypeItemProvider.dispose();
		if (intBuildingInstallationPropertyTypeItemProvider != null) intBuildingInstallationPropertyTypeItemProvider.dispose();
		if (intBuildingInstallationTypeItemProvider != null) intBuildingInstallationTypeItemProvider.dispose();
		if (interiorFurniturePropertyTypeItemProvider != null) interiorFurniturePropertyTypeItemProvider.dispose();
		if (interiorRoomPropertyTypeItemProvider != null) interiorRoomPropertyTypeItemProvider.dispose();
		if (interiorWallSurfaceTypeItemProvider != null) interiorWallSurfaceTypeItemProvider.dispose();
		if (openingPropertyTypeItemProvider != null) openingPropertyTypeItemProvider.dispose();
		if (roofSurfaceTypeItemProvider != null) roofSurfaceTypeItemProvider.dispose();
		if (roomTypeItemProvider != null) roomTypeItemProvider.dispose();
		if (wallSurfaceTypeItemProvider != null) wallSurfaceTypeItemProvider.dispose();
		if (windowTypeItemProvider != null) windowTypeItemProvider.dispose();
	}

}
